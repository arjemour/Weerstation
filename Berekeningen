
/**
 * Write a description of class Berekeningen here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
public class Berekeningen
{
    /** 
     * Luchtdruk 
     * 
     * @param mval Meetwaarde van het vp2pro weerstation 
     * @return De luchtdruk in mbar (=hPa)
     */ 
    public double luchtdruk(short mval)
    {
        double waarde = mval; 
        return ((((waarde)/1000)/0.000295299830714)/100);

    }

    /** 
     * Temperatuur 
     * 
     * @param mval Meetwaarde van het vp2pro weerstation 
     * @return De temperatuur in graden Celcius 
     */ 
    public double temperatuur(short mval)
    {
        double waarde = mval;
        return ((waarde/10)-32)/1.8;
    }

    /** 
     * Relatieve Luchtvochtigheid 
     * 
     * @param mval Meetwaarde van het vp2pro weerstation 
     * @return De relatieve luchtvochtigheid in procenten 
     */ 
    public double luchtVochtigheid(short mval)
    {
        return mval;
    }

    /** 
     * Windsnelheid 
     * 
     * @param mval Meetwaarde van het vp2pro weerstation 
     * @return De windsnelheid in km/h 
     */ 
    public double windSnelheid(short mval) 
    {
        double waarde = mval;
        return waarde*1.609344;
    }

    /** 
     * Windrichting 
     * 
     * @param mval Meetwaarde van het vp2pro weerstation 
     * @return De windrichting in graden 
     */ 
    public double windRichting(short mval) 
    {
        return mval;
    }

    /** 
     * Regenmeter 
     * 
     * @param mval Meetwaarde van het vp2pro weerstation 
     * @return De hoeveelheid regen in mm 
     */ 
    public double regenmeter(short mval) 
    {
        double waarde = mval;
        return waarde*0.2;
    }

    /** 
     * uvIndex 
     * 
     * @param mval Meetwaarde van het vp2pro weerstation 
     * @return UvIndex
     */ 
    public double uvIndex(short mval) 
    {
        double waarde = mval;
        return waarde/10;
    }

    /** 
     * batterySpanning 
     * 
     * @param mval Meetwaarde van het vp2pro weerstation 
     * @return De battery spanning in Volt 
     */ 
    public double batterySpanning(short mval) 
    {
        double waarde = mval;
        return ((waarde*300)/512)/100;
    }

    /** 
     * sunRise 
     * 
     * @param mval Meetwaarde van het vp2pro weerstation 
     * @return Zonsopkomst in hh:mm notatie 
     */ 
    public String sunRise(short mval) 
    {
        String tijd = Short.toString(mval);
        if (tijd.length() == 3)
        {
            return "0" + tijd.substring(0,1) + ":" + tijd.substring(1,3);
        }else{
            return tijd.substring(0,2) + ":" + tijd.substring(2,4);
        }
    }

    /** 
     * sunSet 
     * 
     * @param mval Meetwaarde van het vp2pro weerstation 
     * @return Zonsondergang in hh:mm notatie 
     */ 
    public String sunSet(short mval)
    {
        String tijd = Short.toString(mval);
        if (tijd.length() == 3)
        {
            return "0" + tijd.substring(0,1) + ":" + tijd.substring(1,3);
        }else{
            return tijd.substring(0,2) + ":" + tijd.substring(2,4);
        }
    }

    /** 
     * windChill 
     * 
     * Om de gevoelstemperatuur te berekenen is gebruik gemaakt van de formule van Siple:
     * Tgevoel = 13.12 + 0.6215*T - 11.37*(3.6*V)0.16 + 0.3965*T*(3.6*V)0.16
     * 
     * @param temp Meetwaarde van het vp2pro weerstation temperatuur
     * @param windSpeed Meetwaarde van het vp2pro weerstation windsnelheid
     * @return Gevoelstemperatuur in 
     */ 
    public double windChill(short temp, short windSpeed)
    {
        double windChill= 13.12 + 0.6215*temperatuur(temp) - 11.37*(3.6*windSnelheid(windSpeed))*0.16 + 0.3965*temperatuur(temp)*(3.6*windSnelheid(windSpeed))*0.16;
        return windChill;
    }
    
    /** 
     * dewpoint 
     * 
     * Om het dauwpunt te berekenen is gebruik gemaakt van de formule :
     * Tdauwpunt 
     * 
     * @param temp Meetwaarde van het vp2pro weerstation temperatuur
     * @param RLv Meetwaarde van het vp2pro weerstation relative luchtvochtigheid.
     * @return luchtvochtigheiddauwpunt
     * */
    private double calculateFunction(short T, short vochtigheid) {
        double vochtig = vochtigheid;
        double som = ((17.27*temperatuur(T))/(237.7+temperatuur(T))) + (Math.log(vochtigheid / 100)/Math.log(Math.E));
        return som;
    }
    public double dewPoint(short vochtigheid, short temp) {
        double dewPoint = (237.7 * calculateFunction(temp,vochtigheid))/(17.27 - calculateFunction(temp,vochtigheid));
        return dewPoint;
    }
    
     /** 
     * heat-index
     * 
     * Om de heat-index te berekenen is gebruik gemaakt van de formule :
     * ??
     * 
     * @param tempInF Temperatuur in Fahrenheit
     * @param luchtvochtigheid Meetwaarde van het vp2pro weerstation relative luchtvochtigheid.
     * @return heat-index in graden Celsius
     */ 
   public double berekenHeatIndex(short tempInF, short luchtVochtigheid){
            double temperatuur = tempInF;
            double vochtigheid = luchtVochtigheid;
            
            double Temp =  -42.379 + (2.04901523 * temperatuur) + (10.14333127 * vochtigheid) - (0.22475541 * temperatuur * vochtigheid) 
                	   - (6.83783 * Math.pow(10,-3) * Math.pow(temperatuur,2)) - (5.481717 * Math.pow(10,-2) * Math.pow(vochtigheid,2)) 
                	   + (1.22874 * Math.pow(10,-3) * Math.pow(temperatuur,2) * vochtigheid) + (8.5282 * Math.pow(10,-4) * temperatuur * Math.pow(vochtigheid,2)) 
                	   - (1.99 * Math.pow(10,-6) * Math.pow(temperatuur,2) * Math.pow(vochtigheid,2));
            
            return(Temp);
    }
  
    
}
